/**
 * 
 */
package repository;

import java.util.List;

import javax.persistence.EntityNotFoundException;
import javax.transaction.Transactional;

import org.apache.log4j.Logger;
import org.hibernate.SessionFactory;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.stereotype.Repository;

import engine.Player;

/**
 * @author bak12
 *
 */
@Repository("PlayerRepo")
@Transactional
public class PlayerRepositoryImpl implements PlayerRepository
{
	private Logger log = Logger.getLogger(InventoryItemRepositoryImpl.class);
	
	@Autowired
	private SessionFactory sessionFactory;
	
	@Override
	public boolean createPlayer(Player player)
	{
		if(sessionFactory.getCurrentSession().save(player)!=null)
		{
			log.trace("Player Created");
			return true;
		}
		log.error("Error Creating Player");
		return false;
	}

	@Override
	public boolean updatePlayer(Player player)
	{
		try 
		{
			sessionFactory.getCurrentSession().update(player);
		}
		catch(EntityNotFoundException ex)
		{
			log.error("Player Not Found");
			log.error(ex.getMessage());
			return false;
		}
		log.trace("Player Updated");
		return true;
	}

	@Override
	public boolean deletePlayer(Player player)
	{
		try
		{
			sessionFactory.getCurrentSession().delete(player);
		}
		catch(EntityNotFoundException ex)
		{
			log.error("Player Not Found");
			log.error(ex.getMessage());
			return false;
		}
		
		try
		{
			sessionFactory.getCurrentSession().delete(player);
		}
		catch(EntityNotFoundException ex)
		{
			log.trace("Player Deleted");
			return true;
		}
	}
	
	@Override
	public Player findPlayerById(int Id)
	{
		
	}
	
	@Override
	@Override
	public List<Player> findAllPlayers()
	{
		
	}

}
