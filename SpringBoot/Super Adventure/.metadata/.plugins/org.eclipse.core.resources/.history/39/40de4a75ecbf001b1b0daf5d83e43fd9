/**
 * 
 */
package superAdventure;

import java.util.ArrayList;
import java.util.List;

import engine.HealingPotion;
import engine.ITEM_ID;
import engine.InventoryItem;
import engine.LOCATION_ID;
import engine.Location;
import engine.LootItem;
import engine.Monster;
import engine.Player;
import engine.PlayerQuest;
import engine.QuestCompletionItem;
import engine.Weapon;
import engine.World;

/**
 * @author bak12
 *
 */
public class SuperAdventure
{
	private Player _player;
	private Monster _currentMonster;
	
	private String rtbMessages;
	private String rtbLocation;
	
	public SuperAdventure()
	{
		_player = new Player(10,10,20,0,1);
		MoveTo(World.LocationById(LOCATION_ID.HOME.ordinal()));
		_player.setInventory(new InventoryItem(World.ItemById(ITEM_ID.RUSTY_SWORD.ordinal()), 1));
	}
	
	private void North()
	{
		MoveTo(_player.getCurrentLocation().getLocationToNorth());
	}
	
	private void South() 
	{
		MoveTo(_player.getCurrentLocation().getLocationToSouth());
	}
	
	private void East() 
	{
		MoveTo(_player.getCurrentLocation().getLocationToEast());
	}
	
	private void West() 
	{
		MoveTo(_player.getCurrentLocation().getLocationToWest());
	}
	
	private void MoveTo(Location newLocation)
	{
		//Does location have any required items
		if(newLocation.getItemRequiredToEnter() != null)
		{
			//See if the player has the required item in their inventory
			boolean playerHasRequiredItem = false;
			
			for(InventoryItem ii: _player.getInventory())
			{
				if(ii.getDetails().getId() == newLocation.getItemRequiredToEnter().getId())
				{
					//We found the required item
					playerHasRequiredItem = true;
					break; //Exit out of the loop
				}
			}
			
			//player does not have the required item to enter this location
			if(!playerHasRequiredItem)
			{
				//We didn't find the item in their inventory,
				//so display a message to stop trying to move
				rtbMessages = "You must have a " + newLocation.getItemRequiredToEnter().getName() + " to enter this location.\n";
				return;
			}
		}
		
		//update the player's current location
		_player.setCurrentLocation(newLocation);
		
		//TODO Show/Hide available movement buttons
		//North_Button.visible = (newLocation.LocationToNorth != null);
		//South_Button.visible = (newLocation.LocationToSouth != null);
		//East_Button.visible = (newLocation.LocationToEast != null);
		//West_Button.visible = (newLocation.LocationToWest != null);
		
		//Display current location name and description
		rtbLocation = newLocation.getName() + "\n" + newLocation.getDescription() + "\n";
		
		//Completely heal the player
		_player.setCurrentHitPoints(_player.getMaximumHitPoints());
		
		//TODO Update Hit Points in UI
		//label Hit_Points.text = _player.getCurrentHitPoints.ToString();
		
		//does the location have a quest?
		if(newLocation.getQuestAvailablehere() != null)
		{
			//see if the player already has the quest, an dif they have completed it
			boolean playerAlreadyHasQuest = false;
			boolean playerAlreadyCompletedQuest = false;
		
			for(PlayerQuest playerQuest: _player.getQuests())
			{
				if(playerQuest.getDetails().getId() == newLocation.getQuestAvailablehere().getId())
				{
					playerAlreadyHasQuest = true;
					
					if(playerQuest.isIsCompleted())
					{
						playerAlreadyCompletedQuest = true;
					}
				}
			}
			
			//see if the player already has the quest
			if(playerAlreadyHasQuest)
			{
				//has the player completed the quest
				if(!playerAlreadyCompletedQuest)
				{
					//see if the player has all of the items needed to complete the quest
					boolean playerHasAllItemsToCompleteQuest = true;
					
					for(QuestCompletionItem qci: newLocation.getQuestAvailablehere().getQuestCompletionItems())
					{
						boolean foundItemInPlayersInventory = false;
						
						//check each item in the player's inventory, to see if they have it, and enough of it
						for(InventoryItem ii: _player.getInventory())
						{
							//the player has the item in their inventory
							if(ii.getDetails().getId() == qci.getDetails().getId())
							{
								foundItemInPlayersInventory = true;
								
								if(ii.getQuantity()<qci.getQuantity())
								{
									//the player does not have enough of this item to complete the quest
									playerHasAllItemsToCompleteQuest = false;
									
									//there is no reason to continue checking for the other quest completion items
									break;
								}
								//we found the item, so don't check  the rest of the player's inventory
								break;
							}
						}
						//we did not find the required item, set our variable and stop looking for other items
						if(!foundItemInPlayersInventory)
						{
							//The player does not have this item in their inventory
							playerHasAllItemsToCompleteQuest = false;
							
							//there is no reason to continue checking for the other quest completion items
							break;
						}
					}
					
					//the player has all items required to complete the quest
					if(playerHasAllItemsToCompleteQuest)
					{
						rtbMessages += "\nYou complete the " + newLocation.getQuestAvailablehere().getName() + " quest.\n";
						
						//remove quest items from inventory
						for(QuestCompletionItem qci: newLocation.getQuestAvailablehere().getQuestCompletionItems())
						{
							for(InventoryItem ii: _player.getInventory())
							{
								if(ii.getDetails().getId()==qci.getDetails().getId())
								{
									//subtract the quantity from the player's inventory taht was needed to complete the quest
									ii.setQuantity(-qci.getQuantity());
									break;
								}
							}
						}
						//give quest rewards
						rtbMessages += "You recieve: \n" + newLocation.getQuestAvailablehere().getRewardExperiencePoints() + " experience points, \n" +
						newLocation.getQuestAvailablehere().getRewardGold() + " gold \n" + newLocation.getQuestAvailablehere().getRewardItem().getName() + "\n\n";
						
						_player.setExperiencePoints(newLocation.getQuestAvailablehere().getRewardExperiencePoints());
						_player.setGold(newLocation.getQuestAvailablehere().getRewardGold());
						
						boolean addedItemToPlayerInventory = false;
						
						for(InventoryItem ii: _player.getInventory())
						{
							if(ii.getDetails().getId() == newLocation.getQuestAvailablehere().getRewardItem().getId())
							{
								//they have the item in their inventory, so increase the quantity by 1
								ii.setQuantity(ii.getQuantity()+1);
								
								addedItemToPlayerInventory = true;
								
								break;
							}
						}
						
						//They did not have the item, so add it to their inventory, with a quantity of 1
						if(!addedItemToPlayerInventory)
						{
							_player.setInventory(new InventoryItem(newLocation.getQuestAvailablehere().getRewardItem(), 1));
						}
						
						//mark the quest as completed.
						//find the quest in player's quest list
						for(PlayerQuest pq : _player.getQuests())
						{
							if(pq.getDetails().getId() == newLocation.getQuestAvailablehere().getId())
							{
								//mark it as completed
								pq.setIsCompleted(true);
								break;
							}
						}
					}
				}
			}
			else
			{
				//the player does not already have the quest
				//display messages
				rtbMessages += "You recieve the " + newLocation.getQuestAvailablehere().getName() + " quest. \n";
				rtbMessages += newLocation.getQuestAvailablehere().getDescription();
				rtbMessages += "\nTo complete it, return with:\n";
				
				for(QuestCompletionItem qci: newLocation.getQuestAvailablehere().getQuestCompletionItems())
				{
					if(qci.getQuantity()==1)
					{
						rtbMessages += qci.getQuantity() + " " + qci.getDetails().getName() + "\n";
					}
					else
					{
						rtbMessages += qci.getQuantity() + " " + qci.getDetails().getPluralName() + "\n";
					}
				}
				rtbMessages += "\n";
				
				//add the quest to the player's quest list
				_player.setQuests(new PlayerQuest(newLocation.getQuestAvailablehere()));
			}
		}
		
		//does the location have a monster?
		if(newLocation.getMonsterLivingHere() != null)
		{
			rtbMessages += "You see a " + newLocation.getMonsterLivingHere().getName() + "\n";
			
			//make a new monster, using the values from the standard monster in the World.Monster list
			Monster standardMonster = World.MonsterById(newLocation.getMonsterLivingHere().getId());
			
			_currentMonster = new Monster(standardMonster.getId(), standardMonster.getName(), standardMonster.getMaximumDamage(), standardMonster.getRewardExperiencePoints(),
					standardMonster.getRewardGold(), standardMonster.getCurrentHitPoints(), standardMonster.getMaximumHitPoints());
			
			for(LootItem lootItem: standardMonster.getLootTable())
			{
				_currentMonster.setLootTable(lootItem);
			}
			
			/**TODO set visibility of: weapons, potions
			*cboWeapon.Visible = true
			*cboPotions.visible = true
			*btnUseWeapon.visible = true
			*btnUsePotion.visible = true
			*/
		}
		else
		{
			_currentMonster = null;
			/**TODO set visibility of: weapons, potions
			*cboWeapon.Visible = false
			*cboPotions.visible = false
			*btnUseWeapon.visible = false
			*btnUsePotion.visible = false
			*/
		}
		
		/*refresh player's inventory list
		 * TODO
		 * 
		 *  gvInventory.RowHeadersVisible = false;
			
			dgvInventory.ColumnCount = 2;
			dgvInventory.Columns[0].Name = "Name";
			dgvInventory.Columns[0].Width = 197;
			dgvInventory.Columns[1].Name = "Quantity";
			
			dgvInventory.Rows.Clear();
			
			foreach(InventoryItem inventoryItem in _player.Inventory)
			{
				if(inventoryItem.Quantity > 0) dgvInventory.Rows.Add(new[] { inventoryItem.Details.Name, inventoryItem.Quantity.ToString() });
			
		 	}
			// Refresh player's quest list
			dgvQuests.RowHeadersVisible = false;
			
			dgvQuests.ColumnCount = 2;
			dgvQuests.Columns[0].Name = "Name";
			dgvQuests.Columns[0].Width = 197;
			dgvQuests.Columns[1].Name = "Done?";
			
			dgvQuests.Rows.Clear();
			
			foreach(PlayerQuest playerQuest in _player.Quests)
			{
				dgvQuests.Rows.Add(new[] { playerQuest.Details.Name, playerQuest.IsCompleted.ToString() });
			}
			
			//refresh player's weapons combobox
		 * */
		
		List<Weapon> weapons = new ArrayList<Weapon>();
		
		for(InventoryItem inventoryItem: _player.getInventory())
		{
			if(inventoryItem.getDetails() instanceof Weapon)
			{
				if(inventoryItem.getQuantity() > 0)
				{
					weapons.add((Weapon)inventoryItem.getDetails());
				}
			}
		}
		
		if(weapons.size() == 0)
		{
			//the player does not have any weapons, so hide the weapon combobox and Use button
			//TODO
			/**
			 * cboWeapons.visible = false
			 * btnUseWeapon.visible=fasle*/
		}
		else
		{
			/*
			 * cboWeapons.datasource = weapons
			 * cboWeapons.displyamember = "name"
			 * cboWeapons.valueMember = "ID"
			 * cboWeapons.selectedIndex = 0;
			 * */
		}
		
		//refresh player's potions combobox
		List<HealingPotion> healingPotions = new ArrayList<HealingPotion>();
		
		for(InventoryItem inventoryItem: _player.getInventory())
		{
			if(inventoryItem.getDetails() instanceof HealingPotion)
			{
				if(inventoryItem.getQuantity() > 0)
				{
					healingPotions.add((HealingPotion)inventoryItem.getDetails());
				}
			}
		}
		
		if(healingPotions.size()==0)
		{
			//the player does not have any healing potions, so hide the potion combobox and use button
			//TODO
			/**
			 * cboPotions.visible = false
			 * btnUsePotion.visible=fasle*/
		}
		else
		{
			/*
			 * cboPotions.datasource = healingPotions
			 * cboPotions.displyamember = "name"
			 * cboPotions.valueMember = "ID"
			 * cboPotions.selectedIndex = 0;
			 * */
		}
 	}
	
	private void btnUseWeapon_Click() {}
	private void btnUsePotion_Click() {}
}
